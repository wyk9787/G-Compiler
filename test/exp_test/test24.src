#include <language/lib/math.glib>
#include <language/lib/list.glib>

let main(a : int) : int =
  let lst1 : <{int}> = ref(1 :: 2 :: 3 :: 4 :: {}:int) in 
  let lst2 : <{int}> = ref(4 :: 3 :: 2 :: 1 :: {}:int) in
  let res: <int * float> = ref ( (0, 0.0) ) in
  let l : <{int * float}> = ref ( (1, 2.0) :: (3, 4.0) :: (5, 6.0) :: {} : int * float) in
  let counter : <int> = ref (0) in
  while ((!counter) < 3) do
    res := (fst(!res) + fst(car(!l)),  snd(!res) + snd(car(!l)));
    l := cdr(!(l));
    counter := (!counter) + 1
  end;
  fst(!res) + (fact 5) + (max2 3 4) + (list_sum !lst1) + (inner_product !lst1 !lst2)
;;
