#include <language/lib/math.glib>
#include <language/lib/list.glib>

[-] a = {
  struct {
    int x => 3,
    int y => 4,
  }
};

[-] b = {
  struct {
    int x => a.y,
    int y => a.x,
  }
};

{int} lst1 = { 1 :: 2 :: a.x :: a.y :: {}:int };

{int} lst2 = { b.x :: b.y :: 2 :: 1 :: {}:int };

let [res: <int * float>] = ref ( (0, 0.0) ) in
let [l : <{int * float}>] = ref ( (1, 2.0) :: (3, 4.0) :: (5, 6.0) :: {} : int * float) in
let [counter : <int>] = ref (0) in
while (!(counter) < 3) {
  res := (fst(!(res)) + fst(car(!(l))),  snd(!(res)) + snd(car(!(l))));
  l := cdr(!(l));
  counter := !(counter) + 1
};

fst(!(res)) + factorial(5) + max2(3)(4) + list_sum(lst1) + inner_product(lst1)(lst2)
